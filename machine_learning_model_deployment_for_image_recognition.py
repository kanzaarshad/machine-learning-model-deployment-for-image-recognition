# -*- coding: utf-8 -*-
"""Machine learning model deployment for image recognition.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Da7zUkHM7oLdzFFiMVXbJsdLnvPf72e_
"""

# Import necessary libraries
import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, Flatten, MaxPooling2D
from tensorflow.keras.utils import to_categorical

# Load dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Preprocess data
x_train = x_train.reshape(-1, 28, 28, 1).astype('float32') / 255
x_test = x_test.reshape(-1, 28, 28, 1).astype('float32') / 255
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# Define model
model = Sequential([
    Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

# Compile model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train model
model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=5)

# Save model
model.save('mnist_cnn.h5')

!pip install flask-ngrok
!pip install flask

from flask import Flask, request, jsonify
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array
from PIL import Image
import numpy as np
import io
from flask_ngrok import run_with_ngrok

# Initialize Flask application
app = Flask(__name__)
run_with_ngrok(app)  # Start ngrok when app is run

# Load pre-trained Keras model
model = load_model('mnist_cnn.h5')

# Define a route to handle prediction requests
@app.route('/predict', methods=['POST'])
def predict():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'})

    file = request.files['file']

    if file.filename == '':
        return jsonify({'error': 'No selected file'})

    if file:
        # Read image file
        image = Image.open(io.BytesIO(file.read())).convert('L')
        image = image.resize((28, 28))
        image = img_to_array(image)
        image = np.expand_dims(image, axis=0)
        image = image.astype('float32') / 255

        # Predict class
        prediction = model.predict(image)
        predicted_class = np.argmax(prediction, axis=1)[0]

        return jsonify({'predicted_class': int(predicted_class)})

if __name__ == '__main__':
    app.run()

# Run the Flask app
!python3 app.py

* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Running on http://<random-ngrok-id>.ngrok.io

curl -X POST -F 'file=@path_to_image_file' http://<random-ngrok-id>.ngrok.io/predict